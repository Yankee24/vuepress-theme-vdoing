(window.webpackJsonp=window.webpackJsonp||[]).push([[264],{764:function(a,r,t){"use strict";t.r(r);var e=t(21),s=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h4",{attrs:{id:"_1-spark-streaming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-spark-streaming"}},[a._v("#")]),a._v(" 1. Spark Streaming")]),a._v(" "),t("p",[a._v("Spark Streaming用于流式数据的处理。但是Spark Streaming本质上是准实时的，微批次的数据处理框架。")]),a._v(" "),t("p",[a._v("Spark Streaming使用离散化流（discretized stream）作为抽象表示，叫做DStream。DStream是随着时间推移而收到的数据的序列。DStream就是对RDD在实时数据处理场景的一种封装。")]),a._v(" "),t("h4",{attrs:{id:"_2-spark-streaming的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-spark-streaming的特点"}},[a._v("#")]),a._v(" 2. Spark Streaming的特点")]),a._v(" "),t("ul",[t("li",[a._v("易用")]),a._v(" "),t("li",[a._v("容错")]),a._v(" "),t("li",[a._v("易整合到Spark体系")])]),a._v(" "),t("h4",{attrs:{id:"_3-spark-streaming架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-spark-streaming架构"}},[a._v("#")]),a._v(" 3. Spark Streaming架构")]),a._v(" "),t("h5",{attrs:{id:"_1-架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构图"}},[a._v("#")]),a._v(" 1. 架构图")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("整体架构图")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://typora-image.test.upcdn.net/images/SparkStreaming%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.jpg",alt:""}})])]),a._v(" "),t("li",[t("p",[a._v("Spark Streaming架构图")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://typora-image.test.upcdn.net/images/SparkStreaming%E6%9E%B6%E6%9E%84.jpg",alt:""}})])])]),a._v(" "),t("h5",{attrs:{id:"_2-背压机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-背压机制"}},[a._v("#")]),a._v(" 2. 背压机制")]),a._v(" "),t("p",[a._v("Spark 1.5以前版本，用户如果要限制Receiver的数据接收速率，可以通过设置静态配置参数"),t("code",[a._v("spark.streaming.receiver.maxRate")]),a._v("的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，防止内存溢出，但也会引入其他的问题。比如：producer数据生产高于maxRate，当前集群处理能力也高于maxRate，这就会造成资源利用率下降等问题。")]),a._v(" "),t("p",[a._v("为了更好的协调数据接收速率与资源处理能力，1.5版本开始Spark Streaming可以动态控制数据接收速率来适配集群数据处理能力。背压机制（即Spark Streaming Backpressure）：根据JobScheduler反馈作业的执行信息来动态调整Receiver数据接收率。")]),a._v(" "),t("p",[a._v("通过属性"),t("code",[a._v("spark.streaming.backpressure.enabled")]),a._v("来控制是否启用backpressure机制，默认值false，即不启用。")])])}),[],!1,null,null,null);r.default=s.exports}}]);